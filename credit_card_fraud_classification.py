# -*- coding: utf-8 -*-
"""credit_card_fraud_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kDzEn-AusMBB-7ICqoEh0a_3B1Fxy4dY
"""



"""# **Importing the necessary libraries and CSV file**

---


"""

#importing the necessary libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from dataprep.eda import *

#importing the dataset
df = pd.read_csv("creditcard.csv")

"""# **Analysis of the Dataset**

---


"""

#viewing the dataset
df.head()

df.shape

plot(df)

df.info()

#checking for any null values
print(df.isna().sum())

"""# **Find and remove duplicates or irrelevant samples**

---


"""

#checking for duplicate values
df.duplicated().sum()

#removing duplicate values
df = df.drop_duplicates(keep = 'first')

#checking for duplicate values
df.duplicated().sum()

"""# **Understanding the range of the data columns**

---


"""

#understanding the range of the data columns
df_min = df.min(axis = 0)
df_max = df.max(axis = 0)
df_min

df_minmax = df_min.to_frame()
df_minmax = df_minmax.rename(columns = {'item' : 'Minimum'})
df_minmax

df_minmax['Maximum'] = df_max

df_minmax

df.drop(["Time", "Amount"], axis = 1, inplace = True)

"""# **Scaling the dataset**

---


"""

#Scaling the dataset
from sklearn.preprocessing import StandardScaler

X = df.iloc[:,:-1].values
Y = df.iloc[:,-1].values

X

Y

#standardization
scale = StandardScaler().fit_transform(X)
print(scale)

"""# **splitting the dataset**

---


"""

#splitting the dataset
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2,random_state=100)

"""# **splitting the dataset**

---


"""

#building the model
#import decision tree classifier
from sklearn.tree import DecisionTreeClassifier

#create desicion tree classifier object
clf = DecisionTreeClassifier()

#train decision tree classifier
clf = clf.fit(x_train, y_train)

#predict the response for test dataset
y_pred = clf.predict(x_test)

#import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
print("Accuracy:", metrics.accuracy_score(y_test, y_pred))

"""# **Visualizing the tree**

---


"""

#visualizing the tree
from sklearn import tree
plt.figure(figsize = (100,100))
tree.plot_tree(clf)

